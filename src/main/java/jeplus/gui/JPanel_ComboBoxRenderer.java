/***************************************************************************
 *   jEPlus - EnergyPlus shell for parametric studies                      *
 *   Copyright (C) 2010  Yi Zhang <yizhanguk@gmail.com>               *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 *                                                                         *
 ***************************************************************************
 *                                                                         *
 * Change log:                                                             *
 *                                                                         *
 *  - Created                                                              *
 *                                                                         *
 ***************************************************************************/
package jeplus.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionListener;
import javax.swing.ComboBoxEditor;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.slf4j.LoggerFactory;

/**
 *
 * @author yzhang
 */
public class JPanel_ComboBoxRenderer extends javax.swing.JPanel implements ListCellRenderer, ComboBoxEditor  {

    /** Logger */
    final static org.slf4j.Logger logger = LoggerFactory.getLogger(JPanel_ComboBoxRenderer.class);

    static EPlusTextPanel HostPanel = null;
    
    MarkedSearchTag SS = null;

    /** Creates new form JPanel_ComboBoxRenderer */
    public JPanel_ComboBoxRenderer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSearchString = new javax.swing.JLabel();
        cmdGotoNext = new javax.swing.JButton();
        lblPosition = new javax.swing.JLabel();
        cmdRefresh = new javax.swing.JButton();

        setOpaque(false);

        lblSearchString.setToolTipText("Search string (RED=not found in the file; BLUE=not present in the project)");
        lblSearchString.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 3, 1, 3));

        cmdGotoNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jeplus/images/page_white_go.png"))); // NOI18N
        cmdGotoNext.setToolTipText("Go to the next instance of this search string.");
        cmdGotoNext.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
        cmdGotoNext.setBorderPainted(false);
        cmdGotoNext.setContentAreaFilled(false);
        cmdGotoNext.setEnabled(false);
        cmdGotoNext.setFocusable(false);
        cmdGotoNext.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdGotoNext.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/jeplus/images/page_white_go.png"))); // NOI18N
        cmdGotoNext.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/jeplus/images/page_go.png"))); // NOI18N
        cmdGotoNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGotoNextActionPerformed(evt);
            }
        });

        lblPosition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosition.setToolTipText("Current selection / total instances found");
        lblPosition.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 3, 1, 3));

        cmdRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jeplus/images/view-refresh.png"))); // NOI18N
        cmdRefresh.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cmdRefresh.setBorderPainted(false);
        cmdRefresh.setContentAreaFilled(false);
        cmdRefresh.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdGotoNext, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdRefresh)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmdRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
            .addComponent(lblSearchString, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmdGotoNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdGotoNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGotoNextActionPerformed
        try {
            HostPanel.getContentPane().requestFocus();
            int pos;
            SS.selectNext();
            pos = SS.Markers.get(SS.getCurrentSelection() - 1).intValue(); // because it is 1-based
            if (pos >= 0) {
                HostPanel.getContentPane().setCaretPosition(pos);
                HostPanel.getContentPane().moveCaretPosition(pos + SS.Entry.length());
                lblPosition.setText(SS.getCurrentSelection() + "/" + SS.getMarkers().size());
            }
        }catch (ClassCastException cce) {
            logger.error("", cce);
        }catch (Exception ex) {
            logger.error("", ex);
        }
    }//GEN-LAST:event_cmdGotoNextActionPerformed

    private void cmdRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRefreshActionPerformed
        if (HostPanel != null) {
            HostPanel.getRenderer().updateSearchStringsNow();
        }
    }//GEN-LAST:event_cmdRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGotoNext;
    private javax.swing.JButton cmdRefresh;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblSearchString;
    // End of variables declaration//GEN-END:variables

    public static void setHostPanel (EPlusTextPanel panel) {
        HostPanel = panel;
    }

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        MarkedSearchTag searchstr = (MarkedSearchTag)value;
        if (searchstr != null) {
            AttributeSet Attr = searchstr.getAttributeSet();
            lblSearchString.setText(searchstr.getEntry());
            lblSearchString.setForeground((Color)Attr.getAttribute(StyleConstants.CharacterConstants.Foreground));
            lblPosition.setForeground((Color)Attr.getAttribute(StyleConstants.CharacterConstants.Foreground));
            lblPosition.setText(searchstr.getCurrentSelection() + "/" + searchstr.getMarkers().size());
            if (searchstr.getMarkers().isEmpty()) this.cmdGotoNext.setEnabled(false);
            else this.cmdGotoNext.setEnabled(true);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
        }else {
            lblSearchString.setText("");
            lblPosition.setText("");
            cmdGotoNext.setEnabled(false);
        }
        return this;
    }

    @Override
    public Component getEditorComponent() {
        return this;
    }

    @Override
    public void setItem(Object item) {
        if (item != null) {
            SS = (MarkedSearchTag)item;
            AttributeSet Attr = SS.getAttributeSet();
            lblSearchString.setText(SS.getEntry());
            lblSearchString.setForeground((Color)Attr.getAttribute(StyleConstants.CharacterConstants.Foreground));
            lblPosition.setForeground((Color)Attr.getAttribute(StyleConstants.CharacterConstants.Foreground));
            lblPosition.setText(SS.getCurrentSelection() + "/" + SS.getMarkers().size());
            if (SS.getMarkers().isEmpty()) this.cmdGotoNext.setEnabled(false);
            else this.cmdGotoNext.setEnabled(true);
        }
    }

    @Override
    public Object getItem() {
        return SS;
    }

    @Override
    public void selectAll() {
    }

    @Override
    public void addActionListener(ActionListener l) {
        new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGotoNextActionPerformed(evt);
            }
        };
    }

    @Override
    public void removeActionListener(ActionListener l) {

    }

}
