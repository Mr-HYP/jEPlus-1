/***************************************************************************
 *   jEPlus - EnergyPlus shell for parametric studies                      *
 *   Copyright (C) 2010  Yi Zhang <yi@jeplus.org>                          *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 *                                                                         *
 ***************************************************************************/
package jeplus.gui;

/**
 *
 * @author yzhang
 */
public class JPanel_Instructions extends javax.swing.JPanel implements TitledJPanel {

    protected String Title = "Instructions";
    protected int[] SectionPosition = {0, 100, 200};

    /** Creates new form JPanel_Instructions */
    public JPanel_Instructions() {
        initComponents();
        txpInstructions.setCaretPosition(0);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpInstructions = new javax.swing.JScrollPane();
        txpInstructions = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        txpInstructions.setContentType("text/html");
        txpInstructions.setEditable(false);
        txpInstructions.setText("<HTML>\n<BODY LANG=\"en-GB\" DIR=\"LTR\">\n<H3 CLASS=\"western\"><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A><A NAME=\"Table of Contents|outline\"></A>\nTable of Contents</H3>\n<OL START=0>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#0. Preparation|outline\">Preparation</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#1. EnergyPlus General Settings|outline\">EnergyPlus\n\tGeneral Settings</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#2. Threads control and simulation settings|outline\">Threads\n\tcontrol and simulation settings</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#3. Input files|outline\">Input\n\tfiles</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#4. Simulation parameters and alternative values|outline\">Simulation\n\tparameters and alternative values</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#5. Start simulation|outline\">Start\n\tsimulation</A></P>\n\t<LI><P STYLE=\"margin-bottom: 0cm\"><A HREF=\"#6. Result collection and post-processing|outline\">Result\n\tcollection and post-processing</A></P>\n\t<P>&nbsp;</P>\n</OL>\n<P STYLE=\"margin-bottom: 0cm\"><BR>\n</P>\n<H3 CLASS=\"western\" STYLE=\"margin-top: 0cm; margin-bottom: 0cm\"><A NAME=\"0. Preparation|outline\"></A>\n0. Preparation</H3>\n<P>There are four things you will need before you start using this\nprogram to define a parametric analysis: (1) the latest version of\nEnergyPlus properly installed; (2) building models (IDF files) on\nwhich the parametric study will be carried out; (3) the weather files\nrequired for the simulation; and (4) a plan of the parameters and\ntheir alternative values to be tested. \n</P>\n<P ALIGN=RIGHT><A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"1. EnergyPlus General Settings|outline\"></A>\n1. EnergyPlus General Settings</H3>\n<P>Most of the EnergyPlus settings are intrinsic to your computing\nplatform. You are only required to choose the location of the\nEnergyPlus executable if it is not installed in the default\ndirectory. Please use the Browse button <SPAN STYLE=\"background: #c0c0c0\">[&hellip;]</SPAN>\nto locate the correct directory.</P>\n<P ALIGN=RIGHT><A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"2. Threads control and simulation settings|outline\"></A>\n2. Threads control and simulation settings</H3>\n<DL>\n\t<DT><B>Execution type</B> \n\t</DT><DD>\n\tjEPlus is intended primarily for single-box\n\tmultiply-processor/multiple-core platforms (e.g. most of the\n\tmain-stream business PCs). Some preliminary works have been done to\n\tsupport clusters and networked PCs. \n\t</DD><DT>\n\t<B>Thread control</B> \n\t</DT><DD>\n\tThe number of threads is the number of parallel runs of EnergyPlus\n\tto be allowed in the parametric study. More threads mean sooner the\n\tsimulation jobs can be done. However, the recommended number of\n\tthreads to use depends on the platform and the number of processor\n\tcores available. \n\t</DD><DT>\n\t<B>Start delay</B> \n\t</DT><DD STYLE=\"margin-bottom: 0.5cm\">\n\tThis parameter define the minimal interval between the start of each\n\tnew thread, in order to reduce simultaneous writing to the disk. The\n\tdefault value is set to 5,000ms.</DD></DL>\n<P ALIGN=RIGHT>\n<A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"3. Input files|outline\"></A><B>3. Input\nfiles</B></H3>\n<DL>\n\t<DT><B>IDF template</B> \n\t</DT><DD>\n\tThe work directory is the location where the model template file is\n\tstored. It also serves as the root directory for the sub-directories\n\tgenerated by the individual jobs. Use the &quot;Select&quot; button\n\tto choose the work directory. You can select multiple <I>IDF</I>\n\tfiles as part of the parametric study.</DD><DT>\n\t<B>Edit &quot;tmpl.idf&quot;</B> \n\t</DT><DD>\n\tThe template <I>IDF</I> file (&quot;tmpl.idf&quot;) is a modified\n\tEnergyPlus <I>IDF</I> file, in which some parameter values have been\n\treplaced with special Tags (see <I>Section 4</I> below). You can\n\tprepare this file in any text editor, or edit it here by pressing\n\tthe &quot;Edit&quot; button. If the template file is not present in\n\tthe work directory, an option to choose one will be given. You can\n\tpick any .idf file, which the program will copy to the work\n\tdirectory, rename it to &quot;tmpl.idf&quot;, and open it for\n\tediting. \n\t</DD><DT>\n\t<B>Weather files</B> \n\t</DT><DD>\n\tThe weather files (<I>EPW</I> files) to be used in the simulation\n\tcan be selected by pressing the <I>Browse</I> button. You can select\n\tmultiple weather files as part of the parametric study.</DD><DT>\n\t<B>Use ReadVars</B> \n\t</DT><DD>\n\tEnergyPlus package provides a simple utility for extracting variable\n\tand meter values from the E+ output file (<I>result.eso</I>) and\n\tproducing more readable text file in <I>CSV</I> format. You can\n\tspecify which values to extract by editing &ldquo;<I>my.rvi</I>&rdquo;.\n\tPlease refer to E+ manuals for more details. An &ldquo;<I>Edit</I>&rdquo;\n\tbutton is provided for editing <I>my.rvi</I> within the GUI.</DD><DT>\n\t<B>Local working directory</B></DT><DD STYLE=\"margin-bottom: 0.5cm\">\n\tThe local working directory is where temporary directories and files\n\tto be generated as well as to store the result files.</DD></DL>\n<P ALIGN=RIGHT>\n<A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"4. Simulation parameters and alternative values|outline\"></A>\n4. Simulation parameters and alternative values</H3>\n<P>jEPlus provides a slightly complex but powerful way to manage the\ndefinitions of the parameters and their alternative values. A tree\nstructure is used to identify the hierarchical order of the\nparameters. In theory, user can define almost any problem with this\napproach. \n</P>\n<DL>\n\t<DT><B>Parameter definition</B> \n\t</DT></DL>\n<P STYLE=\"margin-left: 1.01cm\">\nA parameter to be incorporated in the parametric analysis is\nspecified with three essential elements, a unique <I><B>ID</B></I>, a\n<I><B>Search string</B></I>, and a list of <I><B>Alternative values</B></I>.\nThe <I><B>ID</B></I> is short string used for identifying the\nparameter. It is also used to form part of the job title as well as\nthe work directory name in which the job is to be executed. The\nformulation of the job titles will be further explained in the\n&ldquo;Result collection&rdquo; section. \n</P>\n<P STYLE=\"margin-left: 1.01cm\">The <I><B>Search string</B></I> (or\n&ldquo;tag&rdquo;) is a character sequence to be planted in the IDF\nfiles to identify the location of a value to be later inserted. This\nstring must not naturally occur in an IDF file; therefore it is\nrecommended to include special characters (e.g. &lsquo;<FONT FACE=\"Courier New\">@</FONT>&rsquo;)\nthat are not used in the standard EnergyPlus syntax. Note that jEPlus\nonly search and replace one occurrence of a search string in each\njob. A user must ensure that there is only one instance of a search\nstring, as well as all search strings in the IDF will be replaced\nwithin the job. A validation facility has been provided in the jEPlus\nGUI. \n</P>\n<P STYLE=\"margin-left: 1.01cm\">The &ldquo;<I><B>Alternative values</B></I>&rdquo;\nis a list of strings to be used one at a time in the parametric jobs.\njEPlus supports three types of alternative values: <I><B>Discrete</B></I>,\n<I><B>Integer</B></I> and <I><B>Double</B></I>. The syntax for\nspecifying the list of values is explained next. <I>Figure 3</I>\nshows an example of parameter definition. There are two extra fields,\ni.e. &ldquo;<I><B>Name</B></I>&rdquo; and &ldquo;<I><B>Description</B></I>&rdquo;,\nwhich are recorded in the output files for reference, but not used in\nthe simulation. \n</P>\n<DL>\n\t<DT><B>Syntax for </B><I><B>Alternative values</B></I> \n\t</DT></DL>\n<P STYLE=\"margin-left: 0.95cm\">\nFor the &ldquo;<I><B>Discrete</B></I>&rdquo; type of parameters, the\nvalues can be specified with a comma (&lsquo;<FONT FACE=\"Courier New\">,</FONT>&rsquo;)\ndelimited list enclosed in a pair of curly brackets (&lsquo;<FONT FACE=\"Courier New\">{}</FONT>&rsquo;),\ne.g. <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{Detailed,\nSimple, CeilingDiffuser}. </FONT></FONT>For the &ldquo;<I><B>Integer</B></I>&rdquo;\nand &ldquo;<I><B>Double</B></I>&rdquo; parameters, square brackets\n(&lsquo;<FONT FACE=\"Courier New\">[]</FONT>&rsquo;) and\nunion/exclusion operations (&lsquo;<FONT FACE=\"Courier New\">&amp;</FONT>&rsquo;\n&lsquo;<FONT FACE=\"Courier New\">^</FONT>&rsquo;) are accepted in\naddition to the curly brackets (&lsquo;<FONT FACE=\"Courier New\">{}</FONT>&rsquo;).\nThe square brackets are used to define a number series with a uniform\ninterval. For example, the list <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{1,3,5,7,9}</FONT></FONT>\ncan be specified using <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">[1:2:9]</FONT></FONT>.\nColons (&lsquo;<FONT FACE=\"Courier New\">:</FONT>&rsquo;) are used to\nseparate the <I><B>Start Value</B></I>, the <I><B>Interval</B></I>,\nand the <I><B>End Value</B></I>. Please note the last value in the\nresultant list is unnecessarily the <I><B>End Value</B></I>. \n</P>\n<P STYLE=\"margin-left: 0.95cm\">The union operator (&lsquo;<FONT FACE=\"Courier New\">&amp;</FONT>&rsquo;)\ncombines the elements in two lists. For example, <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">[1:2:5]&amp;{2,4,6}</FONT></FONT>\nis equivalent to <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{1,3,5,2,4,6}</FONT></FONT>\n(Note that the list is not sorted). The exclusion operator (&lsquo;<FONT FACE=\"Courier New\">^</FONT>&rsquo;)\nremoves elements in the right-hand list from the left-hand list, e.g.\n<FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">[-2:1:6]^{2,4,6}</FONT></FONT>\ngives <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{-2,-1,0,1,3,5}</FONT></FONT>.\nThe operators are processed in the left-to-right order. In the\ncurrent version, grouping with parentheses is not supported. The\nfollowing example shows the use of all supported operations:\n<FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{1}&amp;[0:5:30]^{0}</FONT></FONT>,\nwhich gives <FONT FACE=\"Courier New\"><FONT SIZE=3 STYLE=\"font-size: 12pt\">{1,5,10,15,20,25,30}</FONT></FONT>\nas the result.</P>\n<DL>\n\t<DT><B>Parameter tree</B> \n\t</DT></DL>\n<P STYLE=\"margin-left: 0.93cm\">\nThe parameters are organized hierarchically into a tree structure.\nEach simulation job is a path from the root node to a leaf (the end\nof a branch) of the tree, with each node containing an optional value\nof the corresponding parameter. As a result, the total number of jobs\nencoded in the tree equals the total number of paths from the root to\nthe leaves. Some simple functions are provided to edit the tree. \n</P>\n<P ALIGN=RIGHT><A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"5. Start simulation|outline\"></A>5.\nStart simulation</H3>\n<P>A number of buttons provide functions to save/load settings and to\nvalidate/start the batch jobs.</P>\n<DL>\n\t<DT><B>Save</B> \n\t</DT><DD>\n\tSave the current settings and jobs. Current implementation save the\n\tjobs in a binary (.<I>obj</I>) file. <I><B>Warning: the saved file\n\tmay be incompatible with later versions of this program.</B></I> \n\t</DD><DT>\n\t<B>Load</B> \n\t</DT><DD>\n\tLoad saved settings and jobs from a (.<I>obj</I>) file. \n\t</DD><DT>\n\t<B>Validate</B> \n\t</DT><DD>\n\tValidate the current settings and jobs. This function checks\n\tsettings, parameters and jobs in the following order:</DD><DD>\n\t(1) EnergyPlus installation and executables</DD><DD>\n\t(2) Working directory and input files</DD><DD>\n\t(3) Parameter tree structure, parameter names and search strings</DD><DD>\n\t(4) Compilation of job group (alternative values of the parameters)</DD><DD>\n\t(5) Count number of jobs</DD><DD>\n\tIf the composition is valid, a message box will appear to show the\n\tnumber of jobs found in the compiled job group. &quot;Start\n\tsimulation&quot; button will be subsequently enabled. \n\t</DD><DT>\n\t<B>Start simulation</B> \n\t</DT><DD>\n\tStart the batch run of the jobs. A new tab will appear in this pane\n\tto show the progress. You can also monitor the progress by checking\n\tthe sub-directories generated in the work directory. \n\t</DD><DT>\n\t<B>Exit</B> \n\t</DT><DD STYLE=\"margin-bottom: 0.5cm\">\n\tPress the Exit button to terminate this program. The program will\n\texit when the current E+ sessions are finished.</DD></DL>\n<P ALIGN=RIGHT>\n<A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n<H3 CLASS=\"western\"><A NAME=\"6. Result collection and post-processing|outline\"></A>\n6. Result collection and post-processing</H3>\n<P>The simulation results from the jobs will be stored in the current\nworking directory, alone a set of index files that are used to\nidentify each result. Since all the output files are in CSV format,\nit is fairly easy to import the results into a database, on which\nStructured Query Language (SQL) can be used to extract subset of data\nfor post-processing and visualization etc. In the jEPlus distribution\npackage, a sample script is provided to demonstrate how to import\noutput files into a MySQL database. \n</P>\n<P ALIGN=RIGHT><A HREF=\"#Table of Contents|outline\">[To Top]</A></P>\n</BODY>\n</HTML>");
        txpInstructions.setAutoscrolls(false);
        scpInstructions.setViewportView(txpInstructions);

        add(scpInstructions, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scpInstructions;
    private javax.swing.JTextPane txpInstructions;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return Title;
    }
    
    public void gotoSection (int section_id) {
        txpInstructions.setCaretPosition(SectionPosition[section_id]);
    }

}
